// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15]          // address of next instruction
        /*,DVal[16],
        AVal[16],
        doingJump*/;          

    PARTS:
    // what sort of instruction
    And(a=instruction[15], b=true, out=isCinstr);    
    
    // ALU output storage instructions
    And(a=instruction[05], b=isCinstr, out=writeA);
    And(a=instruction[04], b=isCinstr, out=writeD);
    And(a=instruction[03], b=isCinstr, out=writeM);        
 
    // A
    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=aluOut16, 
          sel=isCinstr, 
          out=Ainput16);
          
    // save result to A if it's an A instruction, or if the C instruction specifies 'store to A'
    Not(in=isCinstr, out=isAinstr);
    Or(a=isAinstr, b=writeA, out=loadA);
    ARegister(in=Ainput16, load=loadA, out=Aout16);
    //Or16(a=Aout16, b=false, out=AVal);
    
    // D 
    And(a=isCinstr, b=writeD, out=loadD);
    DRegister(in=aluOut16, load=loadD, out=Dout16);
    
    //debug out
    //Or16(a=Dout16, b=false, out=DVal);
    CallAlu(A=Aout16, D=Dout16, M=inM, function=instruction[06..12], 
            jumpCode=instruction[0..2], aluOut=aluOut16, doJump=doJump);
   
    // M
    Or16(a=aluOut16, b=false, out=outM);
    Or16(a=Aout16, b=false, out[15]=false, out[0..14]=addressM);
   
    And(a=doJump, b=isCinstr, out=reallyDoJump);   
    //Or(a=reallyDoJump, b=false, out=doingJump);
    PC(in=Aout16, load=reallyDoJump, inc=true, reset=reset, out[15]=pcTopOut, out[0..14]=pc);       
}
